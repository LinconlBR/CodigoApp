import React, { useState } from "react";
import { base44 } from "@/api/base44Client";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Plus, Target, CheckCircle2, Clock, XCircle } from "lucide-react";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";

import GoalForm from "../components/goals/GoalForm";

export default function Goals() {
  const [showForm, setShowForm] = useState(false);
  const queryClient = useQueryClient();

  const { data: goals, isLoading } = useQuery({
    queryKey: ['goals'],
    queryFn: () => base44.entities.Goal.list('-created_date'),
    initialData: [],
  });

  const updateGoalMutation = useMutation({
    mutationFn: ({ id, data }) => base44.entities.Goal.update(id, data),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['goals'] });
    },
  });

  const deleteGoalMutation = useMutation({
    mutationFn: (id) => base44.entities.Goal.delete(id),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['goals'] });
    },
  });

  const getStatusBadge = (status) => {
    const configs = {
      active: { color: "bg-blue-100 text-blue-800", icon: Clock, label: "Ativa" },
      completed: { color: "bg-emerald-100 text-emerald-800", icon: CheckCircle2, label: "Concluída" },
      expired: { color: "bg-red-100 text-red-800", icon: XCircle, label: "Expirada" }
    };
    const config = configs[status];
    const Icon = config.icon;
    return (
      <Badge className={`${config.color} flex items-center gap-1`}>
        <Icon className="w-3 h-3" />
        {config.label}
      </Badge>
    );
  };

  return (
    <div className="p-4 md:p-8 min-h-screen">
      <div className="max-w-6xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-8">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">Minhas Metas</h1>
            <p className="text-gray-600">Acompanhe seu progresso rumo a um lar mais sustentável</p>
          </div>
          <Button
            onClick={() => setShowForm(!showForm)}
            className="bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 shadow-lg"
          >
            <Plus className="w-5 h-5 mr-2" />
            Nova Meta
          </Button>
        </div>

        {showForm && (
          <Card className="p-6 mb-6 border-0 bg-white/80 backdrop-blur-sm shadow-xl">
            <GoalForm onClose={() => setShowForm(false)} />
          </Card>
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {isLoading ? (
            Array(3).fill(0).map((_, i) => (
              <Card key={i} className="p-6 animate-pulse border-0 bg-white/80">
                <div className="h-4 bg-gray-200 rounded w-3/4 mb-4" />
                <div className="h-2 bg-gray-200 rounded w-full mb-2" />
                <div className="h-3 bg-gray-200 rounded w-1/2" />
              </Card>
            ))
          ) : goals.length === 0 ? (
            <div className="col-span-full">
              <Card className="p-12 text-center border-0 bg-white/80 backdrop-blur-sm">
                <Target className="w-16 h-16 text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Nenhuma meta criada ainda</h3>
                <p className="text-gray-600 mb-4">Comece definindo suas metas de sustentabilidade</p>
                <Button onClick={() => setShowForm(true)} variant="outline">
                  <Plus className="w-4 h-4 mr-2" />
                  Criar Primeira Meta
                </Button>
              </Card>
            </div>
          ) : (
            goals.map((goal) => {
              const progress = Math.min((goal.current_value / goal.target_value) * 100, 100);
              const isExpired = new Date(goal.deadline) < new Date() && goal.status !== 'completed';

              return (
                <Card key={goal.id} className="p-6 border-0 bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900 mb-1">{goal.title}</h3>
                      <p className="text-sm text-gray-600 mb-2">{goal.description}</p>
                    </div>
                    {getStatusBadge(isExpired ? 'expired' : goal.status)}
                  </div>

                  <div className="space-y-3">
                    <div>
                      <div className="flex items-center justify-between mb-2">
                        <span className="text-sm font-medium text-gray-700">Progresso</span>
                        <span className="text-sm font-bold text-emerald-600">{progress.toFixed(0)}%</span>
                      </div>
                      <Progress value={progress} className="h-2" />
                      <p className="text-xs text-gray-500 mt-1">
                        {goal.current_value} / {goal.target_value} {goal.unit}
                      </p>
                    </div>

                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600">Prazo:</span>
                      <span className="font-medium text-gray-900">
                        {format(new Date(goal.deadline), "d 'de' MMMM", { locale: ptBR })}
                      </span>
                    </div>

                    {goal.reward_points > 0 && (
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-gray-600">Pontos:</span>
                        <span className="font-bold text-emerald-600">+{goal.reward_points} pts</span>
                      </div>
                    )}

                    <div className="flex gap-2 pt-2">
                      {goal.status === 'active' && progress >= 100 && (
                        <Button
                          size="sm"
                          className="flex-1 bg-emerald-600 hover:bg-emerald-700"
                          onClick={() => updateGoalMutation.mutate({ 
                            id: goal.id, 
                            data: { status: 'completed' } 
                          })}
                        >
                          <CheckCircle2 className="w-4 h-4 mr-1" />
                          Concluir
                        </Button>
                      )}
                      <Button
                        size="sm"
                        variant="outline"
                        className="flex-1"
                        onClick={() => deleteGoalMutation.mutate(goal.id)}
                      >
                        Excluir
                      </Button>
                    </div>
                  </div>
                </Card>
              );
            })
          )}
        </div>
      </div>
    </div>
  );
}